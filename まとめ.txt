「SNS課題」

#ユーザー登録 / 登録完了 / ログイン
・ユーザーの新規登録/ログイン処理を実装する
・新規ユーザー登録で、登録した個人データでログインできるようにする。
ユーザーの新規登録処理にバリデーション処理を実装する
・Registercontroller内に、登録処理(register)にバリデーションを記述する。
ユーザーの新規登録完了ページに登録したユーザー名を表示させる
※バリデーションとは、入力内容が要件を満たしているか、妥当性を確認すること
・セッション機能（サーバー側で情報を記録しておく機能）で新規登録されたユーザーデータからusernameを引き出し新規登録後の画面で表示させる。
{{ session('username') }}さん。のような
※セッション機能とは、サーバー内に情報を保存し、複数ページ間で共有する。
https://kanda-it-school-kensyu.com/php-basic-contents/pb_ch11/pb_1103/
特徴「
セッション情報はサーバ内に保存される。
保存された情報はブラウザ単位で管理される。
セッションの有効期限は固定されている。(ブラウザを閉じるまで、設定ファイルで決められた時間)
→SNS課題はセッション情報はファイルに保存され、時間は2時間となる。
セッションに格納する情報は、プログラムのデータ形式(文字、数値、配列…)のまま保存できる。
セッションに保存できるデータ量と個数にほぼ限界はない。(最大はディスク容量まで)
セッション情報がどのクライアントの情報なのかを関連づける仕組みは、クッキーに登録したセッションIDで管理している。※この仕組みは次の項で詳しく説明します。
」
ログイン後に表示するページにアクセス制限をかける
・web.phpのルーティングをミドルウェアを記述することにより、ルーティングはログイン認証しているユーザーのみが使えるようになる。


#共通ヘッダー&サイドバー
【ヘッダー】Atlasロゴにトップページへ遷移するリンクを設置する
【ヘッダー】アコーディオンメニューを設置する
アコーディオンメニューのモーダル

【ヘッダー】アコーディオンメニュー内にトップ/プロフィール編集ページへ遷移するリンクを設置する
【ヘッダー】アコーディオンメニュー内にログアウト機能を実装する
a herf~で指定
【サイドバー】フォロー/フォロワー数を表示する
login.blade.php内のサイドバー内にフォロー数とフォロワー数を表示させる記述を追加する。
【サイドバー】フォロー/フォロワーリストページへ遷移するリンクを設置する
【サイドバー】ユーザー検索ページへ遷移するリンクを設置する
a herf~で指定

#トップ
投稿フォームを設置する
index.blade.php内にformファサードのテキストを記述をし、name属性をnewPostに指定する。
→こちら参照　https://laraweb.net/practice/7965/


投稿の登録処理を実装する
Postcontroller内のpostcreateでユーザーIdと投稿内容を$requestで登録
laravel用の処理の記述→formファサードで投稿を作成する。

投稿の編集処理を実装する
・編集ボタンを押した際、モーダル表示されるようにjava記述。モーダル内にテキストエリアと編集完了(name属性はupPost)ボタンを作成し編集機能を実装する。
→Postcontrollor側でもともとのポストが更新後のポスト(upPost)になるようにupdateの記述をする。
投稿の削除処理を実装する
ボタンを押すとpostidを削除する記述をする。
こちらはモーダルではなく、onclickにてするかしないか決められるようにしている。←このonclickがないとボタンを押したらそのまま削除されてしまう。
画面に投稿一覧を表示する
Postcontrollorでフォローしているユーザーのポストを取得している。
→取得したものはindex.blade側で表示するように記述している。
$Postの中の条件に、自分自身と、フォローしている人の記述を記載して投稿一覧にはフォローしている人も表示されるようにしている。

#ユーザー検索,検索結果
検索ワードの入力フォームを設置する
ユーザー検索の処理を実装する
・search.blade.phpにて、検索フォームを記述。
検索後に検索ワードを画面に表示する

フォローする/フォロー解除ボタンを画面に設置する
フォロー機能を実装する
「※ここ絶対聞かれる。」フォロー、アンフォローはどのようなデータのやり取りをしているのか、とか
→user.phpでフォロー、アンフォローのデータを多対多の関係性でリレーションする。
フォローボタン、アンフォローボタンを押したらどうなっているのか
→フォローボタンを押すと、ログインユーザーのフォローデータベース内にユーザー情報が追加される(attach)
→アンフォローボタンを押すと、ログインユーザーのフォローデータベース内にユーザー情報が抜かれる(detach)
重要なのは多対多のリレーションを行って、データのやり取りがどんなふうに行われているのかを理解する。
リレーション→ユーザーテーブルと、フォローテーブルの多対多のリレーション。
↑これをフォローしている。とフォローされている。のそれぞれでリレーションする。

isFollowingとは、ユーザーがフォローしているかどうかを確かめるメソッドで、

・search.blade.php内では、検索し表示されたユーザーの横にフォローしていればアンフォローボタン、フォローしていなければフォローボタンが表示されるようにしている。
どうやってるのか
→if文で、フォローしているか（フォローデータ内にidがあるかないかで判断）し、データ内にあればアンフォローボタン、なければフォローボタンを表示するような形になっている。

#フォローリスト
ユーザーアイコン一覧を表示する
ユーザーの投稿一覧を表示する
ユーザーアイコンに相手ユーザーのプロフィールページへ遷移するリンクを設置する

#相手ユーザーのプロフィール
ユーザー名、アイコン、自己紹介文を画面に表示する
フォローする/フォロー解除ボタンを画面に設置する
フォロー機能を実装する
searchと一緒
ユーザーの投稿一覧を表示する

#ログインユーザーのプロフィール編集
profile.blade.php内での記述
プロフィール編集項目の入力フォームを設置する
既存の情報をプロフィール編集項目に初期値として表示させる
初期値出すのはform内に初期値を出したい項目を記載

プロフィールの編集処理にバリデーション処理を実装する
プロフィールの編集処理を実装する
→bladeに内容記述、web.phpでリレーション記述、リレーションした時の動きはcontrollerで更新する。その流れを記載、
で、returun先に遷移して終了。



大事なことは、name属性が合っているか、
